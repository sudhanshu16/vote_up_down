<?php

/**
 * @file
 * Implements the core voting module on top of Voting API.
 */

// Include the theme.inc file.
module_load_include('inc', 'vud', 'vud.theme');

/**
 * Implementation of hook_menu().
 */
function vud_menu() {
  $items = array();

  $items['admin/config/search/voteupdown/advanced'] = array(
    'title'  => 'General',
    'type'   => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['vote/%/%/%/%/%/%'] = array(
    'title'            => 'Vote',
    'page callback'    => 'vud_vote',
    'page arguments'   => array(1, 2, 3, 4, 5, 6),
    'access callback'  => 'vud_access_callback',
    'access arguments' => array('use vote up/down', 1, 2, 3, 4),
    'type'             => MENU_CALLBACK,
    'file'             => 'vud.theme.inc',
  );

  $items['votereset/%/%/%/%/%'] = array(
    'title'            => 'Reset vote',
    'page callback'    => 'vud_reset',
    'page arguments'   => array(1, 2, 3, 4, 5),
    'access callback'  => 'vud_access_callback',
    'access arguments' => array('reset vote up/down votes', 1, 2, 3, 4),
    'type'             => MENU_CALLBACK,
    'file'             => 'vud.theme.inc',
  );

  $items['vud/%ctools_js/denied/%'] = array(
    'title'            => 'Vote denied',
    'page callback'    => 'vud_denied_vote',
    'page arguments'   => array(1, 3),
    'access arguments' => array('access content'),
    'type'             => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_help().
 */
function vud_help($path, $arg) {
  switch ($path) {
    case 'admin/help#vud':
      $output = '<p>'. t('Provides a configurable up/down voting widget for other modules to use.') .'</p>';
      return $output;
  }
}

/**
 * Access callback for votes.
 *
 * @param $perm
 *   A string containing the permission required to modify the vote.
 * @param $entity_type
 *   A string containing the type of content being voted on.
 * @param $entity_id
 *   An integer containing the unique ID of the content being voted on.
 * @param $value
 *   An integer containing the vote value, 1 for an up vote, -1 for a down vote.
 * @param $tag
 *   A string containing the voting API tag.
 * $param $account
 *   An object containing the user voting on the content, NULL for the current
 *   user.
 *
 * @return
 *   A boolean flagging whether or not the user has access to the vote.
 */
function vud_access_callback($perm, $entity_type, $entity_id, $value, $tag, $account = NULL) {
  if ($account === NULL) {
    global $user;
    $account = $user;
  }

  // If user do not pass system permissions, deny soon.
  if (user_access($perm, $account) !== TRUE) {
    return FALSE;
  }

  // Invokes hook_vud_access(), gives modules abiliXty to allow or disallow access.
  $access_array = module_invoke_all('vud_access', $perm, $entity_type, $entity_id, $value, $tag, $account);
  foreach ($access_array as $access_result) {
    // If one hook implementation want to deny, end there.
    if ($access_result !== TRUE) {
      return FALSE;
    }
  }

  // If we are here, account should pass.
  return TRUE;
}

/**
 * Menu callback; show widget message.
 */
function vud_denied_vote($js = FALSE, $code=VUD_WIDGET_MESSAGE_ERROR) {
  $widget_message_codes = array(
    VUD_WIDGET_MESSAGE_ERROR => t('Sorry, there was problem on the vote.'),
    VUD_WIDGET_MESSAGE_DENIED => t('You are not allowed to vote.'),
  );
  drupal_alter('vud_widget_message_codes', $widget_message_codes);
  if ($js) {
    ctools_include('ajax');
    ctools_include('modal');
    ctools_modal_render('', $widget_message_codes[$code]);
  }
  else {
    return $widget_message_codes[$code];
  }
}

/**
 * Implementation of votingapi hook_votingapi_results_alter().
 *
 * Add positive/negative aggregations for VotingAPI cache points.
 */
function vud_votingapi_results_alter(&$cache, $entity_type, $entity_id) {
  // positive points
  $sql  = "SELECT SUM(v.value) as value_positives, v.tag ";
  $sql .= "FROM {votingapi_vote} v ";
  $sql .= "WHERE v.entity_type = :entity_type AND v.entity_id = :entity_id AND v.value_type = 'points' AND v.value > 0 ";
  $sql .= "GROUP BY v.value_type, v.tag";
  $result = db_query($sql, array(':entity_type' => $entity_type, ':entity_id' => $entity_id));
  foreach ($result as $record) {
    $cache[$record->tag]['points']['positives'] = $record->value_positives;
  }

  // negative points
  $sql  = "SELECT SUM(v.value) as value_negatives, v.tag ";
  $sql .= "FROM {votingapi_vote} v ";
  $sql .= "WHERE v.entity_type = :entity_type AND v.entity_id = :entity_id AND v.value_type = 'points' AND v.value < 0 ";
  $sql .= "GROUP BY v.value_type, v.tag";
  $result = db_query($sql, array(':entity_type' => $entity_type, ':entity_id' => $entity_id));
  foreach ($result as $record) {
    $cache[$record->tag]['points']['negatives'] = $record->value_negatives;
  }
}

/**
 * Implementation of hook_votingapi_metadata_alter().
 */
function vud_votingapi_metadata_alter(&$data) {
  $data['functions']['positives'] = array(
    'name' => t('Positives'),
    'description' => t('The sum of all positive votes for a content.'),
    'module' => 'vud',
  );
  $data['functions']['negatives'] = array(
    'name' => t('Negatives'),
    'description' => t('The sum of all negative votes for a content.'),
    'module' => 'vud',
  );
}
